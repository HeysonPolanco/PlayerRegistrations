@page "/"
@inject MatchService matchService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<h3>MatchIndex</h3>
<PageTitle>Player Registration</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card space-between">
            <h5 class="card-title">Player Registration</h5>
            <a href="/player-create" class="btn btn-primary mt-3">
                <span class="bi bi-plus-square"></span> Create
            </a>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="row align-items-center">
                    <input class="form-control col" placeholder="Filter by Name" @bind="FilterValue" />
                    <button class="btn btn-primary col-auto ms-2" @onclick="Search">Search</button>
                </div>
                <table class="table table-hover mt-3">
                    <thead>
                        <tr>
                            <th>MatchId</th>
                            <th>MatchState</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var match in Matches)
                        {
                            <tr>
                                <td>@match.MatchId</td>
                                <td>@match.Matchstate</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="card-footer space-between">
                    <label>Count: @Matches.Count()</label>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Matches> Matches { get; set; } = new();

    public string FilterValue { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Matches = await matchService.GetList(p => p.MatchId > 0);
    }

    private async Task Search()
    {
        if (!string.IsNullOrWhiteSpace(FilterValue))
        {
            Matches = await matchService.GetList(
                p => p.Matchstate.ToLower().Contains(FilterValue.ToLower())
            );
        }
        else
        {
            Matches = await matchService.GetList();
        }
    }
}