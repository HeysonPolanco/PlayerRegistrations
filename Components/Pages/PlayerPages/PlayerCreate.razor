@page "/Create"
@inject PlayersService playersService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Player Registration</PageTitle>

<EditForm Model="player" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center bg-primary text-white m-2">
                <h3 class="card-title">Player Registration</h3>
            </div>

            <div class="card-body">
                @*PlayerId*@
                <div class="mb-3">
                    <label class="form-label">PlayerId</label>
                    <InputNumber class="form-control small-input" @bind-Value="player.PlayerId" disabled />
                </div>

                @*Concept (Name)*@
                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <InputText class="form-control wide-input" @bind-Value="player.Concept" />
                    <ValidationMessage For="@(() => player.Concept)" />
                </div>
            </div>

            @*Footer*@
            <div class="card-footer text-center mt-2">
                <button type="button" class="btn btn-outline-primary" @onclick="New">
                    <span class="bi bi-plus"></span> New
                </button>
                <button type="submit" class="btn btn-outline-success">
                    <span class="bi bi-check-circle-fill"></span> Save
                </button>
                <a href="/players" class="btn btn-outline-danger">
                    <span class="bi bi-arrow-bar-left"></span> Back
                </a>
            </div>
        </div>
    </div>

    @*Notifications*@
    <label class="text-success" hidden="@string.IsNullOrEmpty(savedMessage)">@savedMessage</label>
    <label class="text-danger" hidden="@string.IsNullOrEmpty(errorMessage)">@errorMessage</label>
</EditForm>

@code {
    private Players player { get; set; } = new Players();
    private string savedMessage { get; set; } = string.Empty;
    private string errorMessage { get; set; } = string.Empty;

    private void New()
    {
        player = new Players();
        errorMessage = string.Empty;
        savedMessage = string.Empty;
    }

    private async Task Save()
    {
        if (string.IsNullOrWhiteSpace(player.Concept))
        {
            errorMessage = "Name is required";
            return;
        }

        var saved = await playersService.Save(player);
        if (saved)
        {
            savedMessage = "Player successfully created";
            navigationManager.NavigateTo("/players");
        }
        else
        {
            errorMessage = "Error saving the player";
        }
    }
}
